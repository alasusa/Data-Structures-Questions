package ParkingLot;
import java.util.List;

public class Attendant {
    
    int level = 0;

    //Determines what floor to park on based of expected hours
    public int determineFloor(double expectedHours) {
        if (expectedHours <= 3) {
            level = 1;
        } else if (expectedHours <= 6) {
            level = 2;
        } else if (expectedHours <= 12) {
            level = 3;
        } else {
            level = 0; // Unknown floor
        }
        return level;
    }

    //Placing the car on the proper floor
    public void parkCar(Car car, ParkingLotFloor floorOne, ParkingLotFloor floorTwo, ParkingLotFloor floorThree, double expectedHours) {
        int floor = determineFloor(expectedHours);

        if (floor >= 1 && floor <= 3) {
            car.setParkingInfo(floor, 0);  // Set the correct floor value
            switch (floor) {
                case 1 -> floorOne.parkCar(car);
                case 2 -> floorTwo.parkCar(car);
                case 3 -> floorThree.parkCar(car);
            }           
        } else {
            System.out.println("Invalid car information or expected hours.");
        }
    }
    // This is the removing car method it uses the findCarByTicket method
    public void removeCarByTicket(int ticket, List<ParkingLotFloor> floors) {

        for (ParkingLotFloor floor : floors) {
            Car foundCar = floor.findCarByTicket(ticket);
            if (foundCar != null) {
                floor.removeCar(foundCar);
                System.out.println("Car with the ticket number " + ticket + 
                        "\nsuccessfully removed from " + foundCar.getFloor() + 
                        ":"+foundCar.getSpot()+".");
                return; // Exit the method if the car is found and removed
            }
        }
        // If the loop completes, the car with the specified ticket was not found
        System.out.println("Car with the ticket " + ticket + " not found.");
    }
    // How the car is found based off the ticket number
    public Car findCarByTicket(int ticket, List<ParkingLotFloor> floors) {
        for (ParkingLotFloor floor : floors) {
            Car foundCar = floor.findCarByTicket(ticket);
            if (foundCar != null) {
                return foundCar;
            }
        }
        return null;  // Car not found
    }
}

package ParkingLot;;


import java.util.Scanner;

//Car class so constructing a car, attaching a ticket number, getters/setters
public class Car {
    private static int nextTicketNumber = 1;  // Static variable for ticket numbers
    private String ticket;
    private String owner;
    private Double hours;
    private int floor;
    private int spot;

    
    
    public Car(String owner, Double hours) {    
        this.owner = owner;
        this.hours = hours; // Assign the value to the class member variable
        this.ticket = generateTicket();        
    }

    public Car(String owner, String ticket){
        this.owner = owner;
        this.ticket = ticket;
    }
    public static Car createCar(Scanner scnr) {
        System.out.print("Enter owner name: ");
        String owner = scnr.nextLine();

        System.out.print("Enter your expected length of stay in hours: ");
        Double hours = scnr.nextDouble();

        // Consume the newline character
        scnr.nextLine();

        return new Car(owner, hours);
    }
    public Double getHours() {
        return hours;
    }

    public String getTicket() {
        return ticket;
    }
    
    public int getFloor() {
        return floor;
    }

    public int getSpot() {
        return spot;
    }

    public void setParkingInfo(int floor, int spot) {
        this.floor = floor;
        this.spot = spot;
    }    

    public String getOwner() {
        return owner;
    }

    public void displayTicket() {
        System.out.println("Your ticket is: " + ticket);
    }

    // Method to generate a new ticket
    private static String generateTicket() {
        if (nextTicketNumber == 1000) {
            nextTicketNumber = 1;  // Reset to 1 when it reaches 1000
        }
        return String.format("%04d", nextTicketNumber++);  // Format as 4-digit ticket number
    }
}


package ParkingLot;;

import java.util.ArrayList;
import java.util.List;



public class ParkingLotFloor {

    private List<Car> parkedCars;
    private int totalSpaces;
    private double hours;
    private double fee;
    private boolean[] spotAvail;

    // Here all the information is being brought together to park the car in proper spot
    public ParkingLotFloor(int spaces) {
        this.parkedCars = new ArrayList<>();
        this.totalSpaces = spaces;
        this.spotAvail = new boolean[spaces];
        this.isSpotAvail();

    }
    // Iteration through floor Array making everything open
    private void isSpotAvail() {
        for (int i = 0; i < spotAvail.length; i++) {
            spotAvail[i] = true; // All spots are initially available
        }
    }
    // Iteration through floors looking for the next open spot
    private int findAvailableSpot() {
        
        isSpotAvail(); //Reset the array so each time we start from beginning       
        for (int i = 0; i < spotAvail.length; i++) {
            if (spotAvail[i]) {
                spotAvail[i] = false; // Mark the spot as occupied
                return i + 1; // Return the spot number (add 1 to make it start at 1 not 0)
            }
        }

        System.out.println("No available spots on this floor.");
        return -1; // No available spot
    }
    // Method to park the car pulls in the floor info and uses findAvailableSpot method
    public void parkCar(Car car) {
        if (parkedCars.size() < totalSpaces) {
            if (!parkedCars.contains(car)) {
                int spot = findAvailableSpot();
                if (spot != -1) {
                    int floor = car.getFloor();
                    car.setParkingInfo(floor, spot);
                    parkedCars.add(car);
                    System.out.println("Car with the ticket: " + car.getTicket() +
                            " parked successfully on Floor " + car.getFloor() +
                            " at Spot " + spot);
                } else {
                    System.out.println("No available spots on this floor.");
                }
            } else {
                System.out.println("Car with the ticket: " + car.getTicket() + " is already parked.");
            }
        } else {
            System.out.println("Parking lot is full.");
        }
    }    
    // Getter to get a parked car
    public List<Car> getParkedCar() {
        return parkedCars;
    }
    // Returns the car and attaches fees
    public void removeCar(Car car) {
        if (parkedCars.contains(car)) {
            double parkingFee = CalcFee(car.getHours());
            System.out.println("Parking fee: $" + parkingFee);

            parkedCars.remove(car);
        } else {
            System.out.println("Car with the ticket: " + car.getTicket() + " not found.");
        }
    }

    private double CalcFee(double hours) {

        if (hours <= 3) {
            return fee = hours * 4; // Floor 1
        } else if (hours <= 6) {
            return fee = hours * 3.5; // Floor 2
        } else if (hours <= 12) {
            return fee = hours * 3; // Floor 3
        }
        return fee;
    }
    // Find the car by ticket method
    public Car findCarByTicket(int ticket) {
    for (Car car : parkedCars) {
        if (car.getTicket().equals(String.format("%04d", ticket))) {
            return car;
        }
    }
    return null;  // Car not found
    }
}


package ParkingLot;

import java.util.Scanner;
import java.util.List;
public class ParkingLot {

    public static void main(String[] args) {
    // Create floors
    ParkingLotFloor floorOne = new ParkingLotFloor(25);
    ParkingLotFloor floorTwo = new ParkingLotFloor(25);
    ParkingLotFloor floorThree = new ParkingLotFloor(25);
    
    Scanner scnr = new Scanner(System.in);
    Attendant attendant = new Attendant();// Single iteration of Attendant
    // Menu
    while (true) {
        System.out.println("\nParking Lot Menu:");
        System.out.println("1. Add a new car");
        System.out.println("2. Pick up a car");
        System.out.println("3. Exit");
        System.out.print("Enter your choice (1-3): ");

    if (scnr.hasNextInt()) {
        int choice = scnr.nextInt();
        scnr.nextLine(); // Consume the newline character
        // Switch statement for the menu
        switch (choice) {
        case 1: // Adding a new car
            Car newCar = Car.createCar(scnr);
            int floor = attendant.determineFloor(newCar.getHours());
            attendant.parkCar(newCar, floorOne, floorTwo, floorThree, newCar.getHours());
            newCar.displayTicket();
            break;
        case 2: // Picking up a car
            System.out.print("\nWhat is your ticket number: ");
            if (scnr.hasNextInt()) {
                int ticket = scnr.nextInt();
                Car foundCar = attendant.findCarByTicket(ticket, List.of(floorOne, floorTwo, floorThree));

                if (foundCar != null) {
                    System.out.println("\nCar found with ticket number " + ticket);
                    attendant.removeCarByTicket(ticket, List.of(floorOne, floorTwo, floorThree));
                } else {
                    System.out.println("Car not found with ticket number " + ticket);
                }
            } else {
                System.out.println("Invalid ticket number. Please enter a valid number.");
                scnr.nextLine(); // Consume the invalid input
            }
            break;
        case 3: // Exit
            System.out.println("Exiting the program. Goodbye!");
            System.exit(0);
            break;
            default:
                System.out.println("Invalid choice. Please enter a number between 1 and 3.");
        }        
    } else {
        System.out.println("Invalid choice. Please enter a valid number.");
        scnr.nextLine(); // Consume the invalid input
    }
        }
    }
}
